/*以下为加密部分修改代码*/
static ssize_t new_sync_read_crypt(struct file *filp,char __user *buf, size_t len,loff_t *ppos)
{
        int i;
        char* mybuf=(char*)kmalloc(sizeof(char)*len,GFP_KERNEL);
        ssize_t ret=new_sync_read(filp,buf,len,ppos);
        copy_from_user(mybuf,buf,len);
        for(i=0;i<len;++i)
                mybuf[i]=(mybuf[i]-25+128)%128;
        copy_to_user(buf,mybuf,len);
        return ret;
}

static ssize_t new_sync_write_crypt(struct file *filp,const char __user *buf,size_t len, loff_t *ppos)
{
        int i;
        char* mybuf=(char*)kmalloc(sizeof(char)*len,GFP_KERNEL);
        copy_from_user(mybuf,buf,len);
        for(i=0;i<len;++i)
	mybuf[i]=(mybuf[i]+25)%128;
        copy_to_user(buf,mybuf,len);
        return new_sync_write(filp,buf,len,ppos);
}

const struct file_operations myext2_file_operations = {
        .read           = new_sync_read_crypt,
        .write          = new_sync_write_crypt,
        .llseek         = generic_file_llseek,
        .read_iter      = myext2_file_read_iter,
        .write_iter     = myext2_file_write_iter,
        .unlocked_ioctl = myext2_ioctl,
#ifdef CONFIG_COMPAT
        .compat_ioctl   = myext2_compat_ioctl,
#endif
        .mmap           = myext2_file_mmap,
        .open           = dquot_file_open,
        .release        = myext2_release_file,
        .fsync          = myext2_fsync,
        .get_unmapped_area = thp_get_unmapped_area,
        .splice_read    = generic_file_splice_read,
        .splice_write   = iter_file_splice_write,
};
